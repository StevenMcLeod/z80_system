MEMSET: MACRO
    RST     08h
ENDM

JMPTBL: MACRO
    RST     38h
ENDM

;DEF_MENU: MACRO qty fl name hdl par
;    DB qty, fl
;    DW name, hdl, par
;ENDM

;DEF_CHILD: MACRO name 
;    DW name 
;ENDM

; Screen formula
; (((29-y) & 1Fh) << 5) | (x & 1Fh)

; Enums
CTRL_RIGHT: equ 01h
CTRL_LEFT: equ 02h
CTRL_UP: equ 04h
CTRL_DOWN: equ 08h
CTRL_JUMP: equ 10h

COIN_COIN: equ 80h
COIN_P1: equ 04h
COIN_P2: equ 08h

; RAM Addresses
FRAMECNT: equ 6000h
CURSOR_POS: equ 600Ch
EXIT_MENU: equ 600Dh
CURR_MENU: equ 600Eh

P1_LAST: equ 6010h
P1_RISING: equ 6011h
P2_LAST: equ 6012h
P2_RISING: equ 6013h
COIN_LAST: equ 6014h
COIN_RISING: equ 6015h

TENCOUNTER: equ 6001h

TC_BASE: equ 6030h
TC_SCROLL: equ 6030h

GAME_MENU: equ 6080h

; Ports
WRAM: equ 6000h
OBJRAM: equ 7000h
VRAM: equ 7400h
DMAC: equ 7800h

BG_REG: equ 7C00h
SFX_REG: equ 7D00h
AUD_IRQ: equ 7D80h
GRID_ENA: equ 7D81h
FLIP_ENA: equ 7D82h
PSL2_ENA: equ 7D83h
NMI_MASK: equ 7D84h
DMA_RDY: equ 7D85h
CREF: equ 7D86h

IN0: equ 7C00h
IN1: equ 7C80h
IN2: equ 7D00h
DSW: equ 7D80h

    ORG 0000h
    XOR     A
    LD      (7D84h), A
    JP      init
    NOP

    ; void memset(void *dst, u8 b, u16 sz)
    ; Input: HL - dst
    ;        A  - b
    ;        BC - sz
    ; Modifies: BC, DE, HL
memset:
    LD      E, L
    LD      D, H
    LD      (HL), A
    INC     DE
    DEC     BC
    LDIR
    RET

    ; void mmemcpy(void *dst, void *src, u8 sz)
    ; Input: HL - dst
    ;        DE - src
    ;        B  - sz
    ; Modifies: A, B, DE, HL
mmemcpy:
    LD      A, (DE)
    LD      (HL), A
    INC     HL
    INC     DE
    DJNZ    mmemcpy
    RET
    NOP

deref16:
    LD      A, (HL)
    INC     HL
    LD      H, (HL)
    LD      L, A
    RET

    ;.ORG 0038h
    DEFS 38h-$, 00h
    ; void dojmptbl(void (*jmptbl[])(void), u8 idx)
    ; Input: HL - jmptbl
    ;        A  - jmptbl idx (up to 127 entry)
    ; Modifies: A, DE, HL
dojmptbl:
    ADD     A, A
    LD      E, A
    LD      D, 0h
    ADD     HL, DE
    LD      E, (HL)
    INC     HL
    LD      D, (HL)
    EX      DE, HL
    JP      (HL)
    
    ;.ORG 0066h    
    ; NMI Handler
    DEFS 66h-$, 00h
    PUSH    AF
    PUSH    BC
    PUSH    DE
    PUSH    HL
    PUSH    IX
    PUSH    IY

    XOR     A
    LD      (NMI_MASK), A

    LD      HL, FRAMECNT
    INC     (HL)

    CALL    do_ctrls
    CALL    do_tencounter

    POP     IY
    POP     IX
    POP     HL
    POP     DE
    POP     BC

    LD      A, 01h
    LD      (NMI_MASK), A
    POP     AF
    RET

do_ctrls:
    ; Rising = !last & now

    ; P1
    LD      HL, P1_LAST
    LD      A, (HL)
    CPL
    LD      E, A
    LD      A, (IN0)
    LD      (HL), A
    AND     1Fh
    AND     E
    INC     HL
    LD      (HL), A
    
    ; P2
    INC     HL
    LD      A, (HL)
    CPL
    LD      E, A
    LD      A, (IN1)
    LD      (HL), A
    AND     1Fh
    AND     E
    INC     HL
    LD      (HL), A

    ; Coin
    INC     HL
    LD      A, (HL)
    CPL
    LD      E, A
    LD      A, (IN2)
    LD      (HL), A
    AND     8Ch
    AND     E
    INC     HL
    LD      (HL), A
    RET

do_tencounter:
    LD      A, (TENCOUNTER)
    INC     A
    CP      10
    JR      NZ, tc_update
    
    LD      B, 10h
    LD      HL, TC_BASE
tc_loop:
    LD      A, (HL)
    OR      A
    JR      Z, tc_cont
    DEC     A
    LD      (HL), A
tc_cont:
    INC     HL
    DJNZ    tc_loop

    XOR     A
tc_update:
    LD      (TENCOUNTER), A
    RET

init:
    LD      SP, 6C00h

    ; Clear workram
    LD      HL, WRAM
    LD      BC, 0BFEh
    RST     08h

    ; Clear vidram
    LD      HL, OBJRAM
    LD      BC, 0400h
    RST     08h
    
    LD      A, 10h
    LD      BC, 0400h
    RST     08h

    CALL    init_game_names
    
    XOR     A
    LD      (CREF), A
    
    INC     A
    LD      (FLIP_ENA), A
    LD      (CREF+1), A
    LD      (NMI_MASK), A

    ;CALL    input_test
    CALL    draw_border
    CALL    do_menu

wait_loop:
    HALT
    JR      wait_loop

init_game_names:
    ; This is a stub for now, must access through 7F00h
    ; Copy initial menu
    LD      DE, M_GAMES
    LD      HL, GAME_MENU+1
    LD      B, 07h
    RST     10h

    LD      A, 3
    LD      (GAME_MENU), A
    LD      HL, GAME_MENU+8

    LD      (HL), S_DKONG & 00FFh
    INC     HL
    LD      (HL), S_DKONG >> 8
    INC     HL

    LD      (HL), S_DKONGJR & 00FFh
    INC     HL
    LD      (HL), S_DKONGJR >> 8
    INC     HL

    LD      (HL), S_RADARSCP & 00FFh
    INC     HL
    LD      (HL), S_RADARSCP >> 8
    INC     HL

    LD      HL, 6080h
    LD      (CURR_MENU), HL
    RET

    ; printpstr(u8 *pstr, u16 scrpos)
    ; Input: HL - str
    ;        DE - scrpos    (5 bit vert, 5 bit horiz)
    ; Modifies: A, BC, DE, HL
printpstr:
    LD      B, (HL)
    INC     HL

    ; printstr(u8 *str, u16 scrpos, u8 sz)
    ; Input: HL - str
    ;        DE - scrpos    (5 bit vert, 5 bit horiz)
    ;        B  - sz
    ; Modifies: A, BC, DE, HL
printstr:
    ; Offset scrpos
    LD      A, 74h
    ADD     A, D
    LD      D, A
    LD      C, 20h  ; Horiz. incr

    ; stride_memcpy(void *dst, void *src, u8 sz, u8 stride)
    ; Input: HL - dst
    ;        DE - src
    ;        B  - sz
    ;        C  - stride
    ; Modifies: A, B, DE, HL
vid_memcpy:
    LD      A, (HL)
    LD      (DE), A
    INC     HL

    LD      A, E
    SUB     C
    LD      E, A
    JR      NC, vid_do_djnz
    DEC     D

vid_do_djnz:
    DJNZ    vid_memcpy
    RET

    ; void printhex(u16 scrpos, u8 b)
    ; Input: DE - scrpos
    ;        C  - b
    ; Modifies: A, C, DE
printhex:
    LD      A, 74h
    ADD     A, D
    LD      D, A
    
    LD      A, C
    AND     0Fh
    CP      0Ah
    JR      NC, do_printhex0
    ADD     11h - 0Ah
do_printhex0:
    LD      (DE), A
    LD      A, E
    SUB     20h
    LD      E, A
    JR      NC, start_printhex1
    DEC     D
start_printhex1:
    LD      A, C
    AND     0F0h
    RRCA
    RRCA
    RRCA
    RRCA
    CP      0Ah
    JR      NC, do_printhex1
    ADD     11h - 0Ah
do_printhex1:
    LD      (DE), A
    RET

    ; void printbin(u16 scrpos, u8 b)
    ; Input: DE - scrpos
    ;        C  - b
    ; Modifies: A, BC, DE
printbin:
    LD      A, 74h
    ADD     A, D
    LD      D, A

    LD      B, 8
printbin_loop:
    LD      A, C
    RLCA
    LD      C, A

    SBC     A, A    ; CF=0: A=00, CF=1: A=FF
    CPL
    INC     A

    LD      (DE), A
    LD      A, E
    SUB     20h
    LD      E, A
    JR      NC, printbin_test
    DEC     D
printbin_test:
    DJNZ    printbin_loop
    RET

input_test:
    LD      HL, S_TESTING
    LD      DE, 03A6h
    LD      B, 8
    CALL    printstr
    
    LD      DE, 03A7h
    LD      B, 4
    CALL    printstr

    LD      DE, 03A8h
    LD      B, 4
    CALL    printstr

    LD      DE, 03A9h
    LD      B, 4
    CALL    printstr

    LD      DE, 03AAh
    LD      B, 5
    CALL    printstr

    ; Push framecnt for later use
    LD      A, (FRAMECNT)
    PUSH    AF
input_loop:
    ;LD      A, (7C00h)
    LD      A, (P1_LAST)
    LD      C, A
    LD      DE, 02E7h
    CALL    printbin

    ;LD      A, (7C80h)
    LD      A, (P2_LAST)
    LD      C, A
    LD      DE, 02E8h
    CALL    printbin

    ;LD      A, (7D00h)
    LD      A, (COIN_LAST)
    LD      C, A
    LD      DE, 02E9h
    CALL    printbin

    LD      A, (7D80h)
    LD      C, A
    LD      DE, 02EAh
    CALL    printbin

    LD      HL, FRAMECNT
    POP     AF
input_wait:
    CP      (HL)
    JR      NZ, input_wait
    LD      A, (HL)
    PUSH    AF
    JR      input_loop

draw_border:
    ; Sides
    LD      DE, -0020h
    LD      HL, 77BEh
    LD      A, 7Fh
    LD      B, 26
border_left:
    LD      (HL), A
    DEC     HL
    DJNZ    border_left

    LD      L, 09Fh
    LD      A, 7Ch
    LD      B, 26
border_bottom:
    LD      (HL), A
    ADD     HL, DE
    DJNZ    border_bottom

    LD      L, 45h
    LD      A, 7Dh
    LD      B, 26
border_right:
    LD      (HL), A
    INC     HL
    DJNZ    border_right

    LD      HL, 7785h
    LD      A, 7Eh
    LD      B, 26
border_top:
    LD      (HL), A
    ADD     HL, DE
    DJNZ    border_top

    ; Corners
    LD      A, 8Ch
    LD      (745Fh), A
    INC     A
    LD      (7444h), A
    INC     A
    LD      (77BFh), A
    INC     A
    LD      (77A4h), A
    RET

draw_crosshatch:
    LD      HL, 7440h
    LD      C, 3Fh

cross_pre_loop:
    LD      B, 10h

cross_loop:
    LD      (HL), C
    INC     HL
    DEC     C
    LD      (HL), C
    INC     HL
    INC     C
    DJNZ    cross_loop

    LD      A, 41h
    CP      C
    JR      Z, cross_change
    LD      C, A
    JR      cross_test

cross_change:
    DEC     C
    DEC     C

cross_test:
    LD      A, L
    CP      0C0h
    JR      NZ, cross_pre_loop

    LD      A, H
    CP      77h
    JR      NZ, cross_pre_loop
    RET

clear_screen:
    LD      HL, 7440h
clear_loop:
    LD      A, 10h
    LD      (HL), A
    INC     HL
    LD      A, L
    CP      0C0h
    JR      NZ, clear_loop

    LD      A, H
    CP      77h
    JR      NZ, clear_loop
    RET

clear_inside:
    LD      HL, 7465h
    LD      B, 26
inside_loop:
    LD      A, 10h
    LD      (HL), A
    INC     L
    LD      A, L
    AND     1Fh
    CP      1Fh
    JR      NZ, inside_loop

    LD      A, L
    ADD     6
    LD      L, A
    LD      A, 0
    ADC     A, H
    LD      H, A
    DJNZ    inside_loop
    RET

    ; HL - Menu ptr
print_menu:
    PUSH    HL
    CALL    clear_inside

    ; Print Title
    POP     HL
    PUSH    HL
    INC     HL
    INC     HL
    RST     18h
    LD      DE, 366h
    CALL    printpstr

    POP     HL
    LD      B, (HL) 
    LD      DE, 0008h
    ADD     HL, DE

    LD      C, 8>>1
print_menu_loop:
    PUSH    HL
    RST     18h

    LD      A, C
    INC     C
    ADD     A, A
    ADD     20h
    LD      E, A
    LD      D, 03h  ; Base offset 320h

    PUSH    BC
    CALL    printpstr

    POP     BC
    POP     HL
    INC     HL
    INC     HL
    DJNZ    print_menu_loop
    RET

redraw_cursor:
    LD      C, A
    LD      A, (CURSOR_POS)
    CP      C
    RET     Z
    
    ; Erase old
    LD      H, 77h
    ADD     A, 8>>1
    ADD     A, A
    ADD     60h
    LD      L, A
    LD      A, 10h
    LD      (HL), A
    
    LD      A, C
    LD      (CURSOR_POS), A

draw_cursor:
    ; Draw new
    LD      H, 77h
    ADD     A, 8>>1
    ADD     A, A
    ADD     60h
    LD      L, A
    LD      A, 0FFh
    LD      (HL), A
    RET

do_menu:
    LD      HL, (CURR_MENU)
    CALL    print_menu

    XOR     A
    LD      (CURSOR_POS), A
    CALL    draw_cursor

    LD      HL, (CURR_MENU)
    LD      B, (HL)

do_menu_loop:
    LD      A, (EXIT_MENU)
    OR      A
    RET     NZ
    
    LD      A, (FRAMECNT)
    PUSH    AF

    LD      A, (COIN_RISING)
    RRCA
    RRCA
    RRCA    ; P1 Start

    RRCA    ; P2 Start

    LD      A, (P1_RISING)
    RRCA    ; Left
    RRCA    ; Right
    RRCA    ; Up
    JR      C, cursor_up
    
    RRCA    ; Down
    JR      C, cursor_down

    JR      do_menu_join

cursor_up:
    LD      HL, CURSOR_POS
    LD      A, (HL)
    DEC     A
    CP      0FFh
    JR      NZ, cursor_join
    ADD     B
    JR      cursor_join

cursor_down:
    LD      HL, CURSOR_POS
    LD      A, (HL)
    INC     A
    CP      B
    JR      NZ, cursor_join
    XOR     A
    JR      cursor_join

cursor_join:
    CALL    redraw_cursor

do_menu_join:
    LD      HL, FRAMECNT
    POP     AF
do_menu_wait:
    CP      (HL)
    JR      Z, do_menu_wait
    JR      do_menu_loop

    
; Strings
S_TESTING:  DB 24h, 15h, 23h, 24h, 19h, 1Eh, 17h, 2Eh
S_PORT0:    DB 19h, 1Eh, 00h, 2Eh
S_PORT1:    DB 19h, 1Eh, 01h, 2Eh
S_PORT2:    DB 19h, 1Eh, 02h, 2Eh
S_DSW0:     DB 14h, 23h, 27h, 00h, 2Eh

; PStrings
S_SETTINGS: DB 8,  23h, 15h, 24h, 24h, 19h, 1Eh, 17h, 23h
S_GAMES:    DB 5,  17h, 11h, 1Dh, 15h, 23h
S_CTRLS:    DB 8,  13h, 1Fh, 1Eh, 24h, 22h, 1Fh, 1Ch, 23h
S_CROSSH:   DB 10, 13h, 22h, 1Fh, 23h, 23h, 18h, 11h, 24h, 13h, 18h
S_SAVE:     DB 4,  23h, 11h, 26h, 15h
S_CANCEL:   DB 6,  13h, 11h, 1Eh, 13h, 15h, 1Ch

S_GAMELIST: DB 9,  17h, 11h, 1Dh, 15h, 10h, 1Ch, 19h, 23h, 24h

S_DKONG:    DB 16, 14h, 1Fh, 1Eh, 1Bh, 15h, 29h, 10h, 14h, 1Fh, 1Eh, 17h, 10h, 30h, 25h, 23h, 31h
S_DKONGJR:  DB 20, 14h, 1Fh, 1Eh, 1Bh, 15h, 29h, 10h, 14h, 1Fh, 1Eh, 17h, 10h, 1Ah, 22h, 42h, 10h, 30h, 25h, 23h, 31h
S_RADARSCP: DB 16, 22h, 11h, 14h, 11h, 22h, 10h, 23h, 13h, 1Fh, 20h, 15h, 10h, 30h, 25h, 23h, 31h

; Menu Structs:
;struct menu {
;    u8 qty;
;    u8 flags;
;    char *name;
;    void (*handler)(u8);
;    struct Menu *parent;
;    char *ch_name[];
;}

M_SETTINGS: 
    DB 5, 0
    DW S_SETTINGS, 0000h, 0000h
    DW S_GAMES, S_CTRLS, S_CROSSH, S_SAVE, S_CANCEL
    ;DEF_MENU  5 0 S_SETTINGS handle_settings 0000h
    ;DEF_CHILD S_GAMES
    ;DEF_CHILD S_CTRLS
    ;DEF_CHILD S_CROSSH
    ;DEF_CHILD S_SAVE
    ;DEF_CHILD S_CANCEL

M_GAMES:
    DB 0 
    DW S_GAMELIST, 0000h, M_SETTINGS

;M_TEST: DB 0
